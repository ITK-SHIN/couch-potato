"use client";

import { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import StrapiContent from "@/components/StrapiContent";
import HomePageContent from "@/components/HomePageContent";
import HomeVideoManager from "@/components/HomeVideoManager";
import UniversalContent from "@/components/ui/UniversalContent";
import { strapiApiClient } from "@/utils/strapi";
import { useAdmin } from "@/contexts/AdminContext";

export default function Home() {
  const [isMuted, setIsMuted] = useState<boolean>(true);
  const [volume, setVolume] = useState<number>(75);
  const [iframeRef, setIframeRef] = useState<HTMLDivElement | null>(null);
  const [videoContainerRef, setVideoContainerRef] =
    useState<HTMLDivElement | null>(null);
  const [isPlayerReady, setIsPlayerReady] = useState<boolean>(false);
  const [player, setPlayer] = useState<any>(null);
  const [homeVideo, setHomeVideo] = useState<any>(null);
  const [selectedVideo, setSelectedVideo] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const { isAdmin } = useAdmin();

  // ???ÅÏÉÅ ?∞Ïù¥??Î°úÎìú
  const loadHomeVideo = async () => {
    try {
      const response = await fetch("/api/home-video");
      if (response.ok) {
        const result = await response.json();
        setHomeVideo(result.video);
      }
    } catch (error) {
      console.error("???ÅÏÉÅ Î°úÎî© ?§Î•ò:", error);
    }
  };

  // ???ÅÏÉÅ Î≥ÄÍ≤??∏Îì§??
  const handleHomeVideoChange = (video: any) => {
    setHomeVideo(video);
  };

  // ?ÅÏÉÅ Î™®Îã¨ ?¥Í∏∞
  const openVideoModal = (videoId: string) => {
    setSelectedVideo(videoId);
    setIsModalOpen(true);
  };

  // ?ÅÏÉÅ Î™®Îã¨ ?´Í∏∞
  const closeVideoModal = () => {
    setSelectedVideo(null);
    setIsModalOpen(false);
  };

  // ???ÅÏÉÅ Î°úÎìú
  useEffect(() => {
    loadHomeVideo();
  }, []);

  // YouTube Player API Î°úÎìú Î∞?Ï¥àÍ∏∞??
  useEffect(() => {
    // YouTube API ?§ÌÅ¨Î¶ΩÌä∏ Î°úÎìú
    if (typeof window !== "undefined" && !window.YT) {
      const script = document.createElement("script");
      script.src = "https://www.youtube.com/iframe_api";
      script.async = true;
      document.head.appendChild(script);

      // API Ï§ÄÎπ??ÑÎ£å ÏΩúÎ∞±
      window.onYouTubeIframeAPIReady = () => {
        console.log("YouTube API loaded");
        setIsPlayerReady(true);
      };
    } else if (window.YT && window.YT.Player) {
      setIsPlayerReady(true);
    }

    return () => {
      // ?¥Î¶∞??
      if (window.onYouTubeIframeAPIReady) {
        window.onYouTubeIframeAPIReady = null;
      }
    };
  }, []);

  // ?åÎ†à?¥Ïñ¥ Ï¥àÍ∏∞??
  useEffect(() => {
    if (
      isPlayerReady &&
      iframeRef &&
      window.YT &&
      window.YT.Player &&
      !player
    ) {
      try {
        console.log("Creating YouTube player...");
        const newPlayer = new window.YT.Player(iframeRef, {
          height: "100%",
          width: "100%",
          videoId: homeVideo?.videoId || "1CUt84BK_p0",
          playerVars: {
            autoplay: 1,
            mute: 1,
            loop: 1,
            playlist: homeVideo?.videoId || "1CUt84BK_p0",
            controls: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1,
            playsinline: 1,
          },
          events: {
            onReady: (event: any) => {
              console.log("YouTube Player ready!");
              // Ï¥àÍ∏∞ Î≥ºÎ•® ?§Ï†ï
              event.target.setVolume(volume);
              // Ï¥àÍ∏∞?êÎäî ??ÉÅ ?åÏÜåÍ±??ÅÌÉú
              event.target.mute();
              console.log(
                `Initial volume set to: ${volume}, muted: ${isMuted}`
              );
            },
            onStateChange: (event: any) => {
              console.log("Player state changed:", event.data);
            },
          },
        });
        setPlayer(newPlayer);
      } catch (error) {
        console.error("Error creating YouTube player:", error);
      }
    }
  }, [isPlayerReady, iframeRef, player, isMuted, volume, homeVideo]);

  // ?Ä?§ÌÅ¨Î¶??†Í? ?®Ïàò
  const toggleFullscreen = () => {
    if (videoContainerRef) {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        videoContainerRef.requestFullscreen();
      }
    }
  };

  return (
    <>
      {/* Hero Section - Enhanced Impact Layout */}
      <main className="relative min-h-screen overflow-hidden">
        {/* Dynamic Background */}
        <div className="absolute inset-0">
          <Image
            src="/imgs/1.jpg"
            alt="COUCH POTATO Background"
            fill
            priority
            className="object-cover opacity-60"
          />
          {/* Enhanced Gradient Overlays - Î°úÍ≥† ?âÏÉÅ Í∏∞Î∞ò */}
          <div className="absolute inset-0 bg-gradient-to-br from-black/70 via-clapperboard-gray/30 to-black/80"></div>
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
          {/* Animated Gradient Accent - Í∞êÏûêÏπ??§Î†åÏßÄ */}
          <div className="absolute inset-0 bg-gradient-to-r from-potato-orange/20 via-transparent to-potato-orange-light/20 opacity-50 animate-pulse"></div>
        </div>

        {/* Hero Content - Enhanced Responsive Layout with Mobile Nav Spacing */}
        <div className="relative z-10 min-h-screen px-4 sm:px-6 lg:px-8 pt-28 sm:pt-32 md:pt-36 lg:pt-0 flex items-center justify-center">
          <div className="max-w-7xl w-full mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-12 items-center">
              {/* Left Content - Responsive Typography & Spacing */}
              <div className="lg:col-span-7 text-center lg:text-left space-y-6 sm:space-y-8 lg:space-y-10">
                {/* Massive Brand Title - Better Mobile Typography */}
                <div className="animate-slide-up">
                  <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl 2xl:text-8xl font-black text-white mb-4 sm:mb-6 leading-tight">
                    <span className="inline-block transform hover:scale-105 transition-transform duration-300">
                      COUCH
                    </span>
                    <span className="inline-block ml-2 sm:ml-3 md:ml-4 bg-gradient-to-r from-potato-orange via-potato-orange-light to-potato-orange-dark bg-clip-text text-transparent transform hover:scale-105 transition-transform duration-300">
                      POTATO
                    </span>
                  </h1>
                  {/* Decorative Line - Responsive Width */}
                  <div className="w-20 sm:w-24 lg:w-32 h-1 bg-gradient-to-r from-potato-orange to-potato-orange-light mb-6 sm:mb-8 mx-auto lg:mx-0"></div>
                </div>

                {/* Enhanced Tagline - Better Mobile Typography */}
                <HomePageContent isAdmin={isAdmin} />

                {/* Enhanced CTA Buttons - Better Mobile Layout */}
                <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center lg:justify-start items-center animate-slide-up-delayed pt-4 sm:pt-6">
                  <Link href="/contact" className="w-full sm:w-auto">
                    <button className="group w-full sm:w-auto px-8 sm:px-10 lg:px-12 py-4 sm:py-5 bg-gradient-to-r from-potato-orange to-potato-orange-light text-white font-black rounded-full hover:from-potato-orange-light hover:to-potato-orange-dark transform hover:scale-110 hover:rotate-1 transition-all duration-300 shadow-2xl border-2 border-potato-orange relative overflow-hidden">
                      <span className="relative z-10 flex items-center justify-center gap-2 sm:gap-3 text-base sm:text-lg">
                        <UniversalContent
                          isAdmin={isAdmin}
                          pageName="home"
                          fields={{
                            cta_button1: {
                              value: "?? ?ÑÎ°ú?ùÌä∏ ?úÏûë?òÍ∏∞",
                              className: "text-base sm:text-lg",
                            },
                          }}
                        />
                      </span>
                      <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    </button>
                  </Link>
                  <Link href="/portfolio" className="w-full sm:w-auto">
                    <button className="group w-full sm:w-auto px-8 sm:px-10 lg:px-12 py-4 sm:py-5 border-3 border-potato-orange text-potato-orange font-black rounded-full hover:bg-potato-orange hover:text-white transform hover:scale-110 hover:-rotate-1 transition-all duration-300 shadow-xl relative overflow-hidden">
                      <span className="relative z-10 flex items-center justify-center gap-2 sm:gap-3 text-base sm:text-lg">
                        <UniversalContent
                          isAdmin={isAdmin}
                          pageName="home"
                          fields={{
                            cta_button2: {
                              value: "?é¨ ?¨Ìä∏?¥Î¶¨??Î≥¥Í∏∞",
                              className: "text-base sm:text-lg",
                            },
                          }}
                        />
                      </span>
                      <div className="absolute inset-0 bg-gradient-to-r from-potato-orange/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    </button>
                  </Link>
                </div>

                {/* Additional CTA - Better Mobile */}
                <div className="animate-slide-up-delayed pt-2 sm:pt-4">
                  <Link href="#services">
                    <button className="group px-6 sm:px-8 lg:px-10 py-3 sm:py-4 bg-gradient-to-r from-clapperboard-gray/80 to-clapperboard-gray-light/80 backdrop-blur-sm text-white font-bold rounded-full hover:from-clapperboard-gray-light hover:to-clapperboard-gray-dark transform hover:scale-105 transition-all duration-300 shadow-xl border border-white/20">
                      <span className="flex items-center justify-center gap-2 sm:gap-3 text-sm sm:text-base">
                        <UniversalContent
                          isAdmin={isAdmin}
                          pageName="home"
                          fields={{
                            cta_button3: {
                              value: "?ìã ?úÎπÑ??Î≥¥Í∏∞",
                              className: "text-sm sm:text-base",
                            },
                          }}
                        />
                        <svg
                          className="w-4 h-4 sm:w-5 sm:h-5 group-hover:translate-x-1 transition-transform"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M19 14l-7 7m0 0l-7-7m7 7V3"
                          />
                        </svg>
                      </span>
                    </button>
                  </Link>
                </div>
              </div>

              {/* Right Content - Enhanced Responsive Video */}
              <div className="lg:col-span-5 animate-slide-up-delayed mt-8 lg:mt-0">
                <div className="relative group">
                  {/* Enhanced Glassmorphism Frame - Better Mobile Padding */}
                  <div className="relative bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-2xl rounded-2xl sm:rounded-3xl p-4 sm:p-6 lg:p-8 border border-white/20 shadow-2xl hover:scale-105 lg:hover:scale-110 transition-all duration-700 hover:shadow-3xl">
                    {/* Video Player - Better Mobile Aspect */}
                    <div
                      ref={(ref) => setVideoContainerRef(ref)}
                      className="relative aspect-video rounded-xl sm:rounded-2xl overflow-hidden shadow-2xl bg-black/30 border border-white/10"
                    >
                      <div
                        ref={(ref) => setIframeRef(ref)}
                        className="w-full h-full rounded-xl sm:rounded-2xl"
                        id="youtube-player-home"
                      ></div>

                      {/* Enhanced Fullscreen Button - Mobile Optimized */}
                      <button
                        onClick={toggleFullscreen}
                        className="absolute top-2 sm:top-4 right-2 sm:right-4 w-10 h-10 sm:w-12 sm:h-12 bg-black/60 hover:bg-black/80 rounded-full flex items-center justify-center shadow-lg transform hover:scale-110 transition-all duration-300 backdrop-blur-sm opacity-0 group-hover:opacity-100 z-10 border border-white/20"
                        title="?ÑÏ≤¥?îÎ©¥"
                      >
                        <svg
                          className="w-5 h-5 sm:w-6 sm:h-6 text-white"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"
                          />
                        </svg>
                      </button>
                    </div>

                    {/* ???ÅÏÉÅ Í¥ÄÎ¶¨Ïûê (Í¥ÄÎ¶¨ÏûêÎß??úÏãú) */}
                    <HomeVideoManager
                      isAdmin={isAdmin}
                      onVideoChange={handleHomeVideoChange}
                    />

                    {/* Home Video Card - Portfolio Style */}
                    {homeVideo && (
                      <div className="mt-4 sm:mt-6 lg:mt-8">
                        <div className="group relative bg-clapperboard-gray-light rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:scale-105 overflow-hidden max-w-md mx-auto">
                          {/* Thumbnail */}
                          <div className="relative aspect-video overflow-hidden">
                            <Image
                              src={homeVideo.thumbnail}
                              alt={homeVideo.title}
                              fill
                              className="object-cover group-hover:scale-110 transition-transform duration-500"
                            />
                            <div className="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-300"></div>

                            {/* Play Button */}
                            <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <button
                                onClick={() => openVideoModal(homeVideo.videoId)}
                                className="w-20 h-20 bg-red-600 rounded-full flex items-center justify-center shadow-2xl transform scale-75 group-hover:scale-100 transition-transform duration-300 hover:bg-red-700"
                              >
                                <svg
                                  className="w-8 h-8 text-white ml-1"
                                  fill="currentColor"
                                  viewBox="0 0 24 24"
                                >
                                  <path d="M8 5v14l11-7z" />
                                </svg>
                              </button>
                            </div>

                            {/* Category Badge */}
                            <div className="absolute top-4 left-4">
                              <span className="px-3 py-1 bg-black/70 text-white text-xs font-bold rounded-full backdrop-blur-sm">
                                {homeVideo.category === "commercial" ? "Í¥ëÍ≥†" : 
                                 homeVideo.category === "wedding" ? "?®Îî©" :
                                 homeVideo.category === "brand" ? "Î∏åÎûú?? :
                                 homeVideo.category === "corporate" ? "Í∏∞ÏóÖ?çÎ≥¥" :
                                 homeVideo.category === "event" ? "?¥Î≤§?? :
                                 homeVideo.category === "education" ? "ÍµêÏú°" :
                                 homeVideo.category === "social" ? "?åÏÖúÎØ∏Îîî?? :
                                 homeVideo.category}
                              </span>
                            </div>
                          </div>

                          {/* Content */}
                          <div className="p-4 sm:p-6">
                            <div className="flex items-center justify-between mb-3">
                              <span className="text-xs sm:text-sm text-potato-orange font-semibold">
                                {homeVideo.client}
                              </span>
                              <span className="text-xs sm:text-sm text-gray-400">
                                {homeVideo.year}
                              </span>
                            </div>

                            <h3 className="text-lg sm:text-xl font-bold text-white mb-3 group-hover:text-potato-orange transition-colors duration-300 line-clamp-2">
                              {homeVideo.title}
                            </h3>

                            <p className="text-gray-300 text-xs sm:text-sm leading-relaxed mb-4 line-clamp-3">
                              {homeVideo.description}
                            </p>

                            {/* Tags */}
                            <div className="flex flex-wrap gap-2 mb-4">
                              {homeVideo.tags?.map((tag: any) => (
                                <span
                                  key={tag.id}
                                  className={`px-2 py-1 text-xs font-bold rounded-full ${
                                    tag.color === "potato-orange"
                                      ? "bg-orange-500 text-white"
                                      : tag.color === "clapperboard-gray"
                                      ? "bg-gray-500 text-white"
                                      : "bg-orange-300 text-white"
                                  }`}
                                >
                                  {tag.text}
                                </span>
                              ))}
                            </div>

                            {/* Stats */}
                            <div className="flex items-center gap-4 text-sm text-gray-300 mb-4">
                              <span className="flex items-center gap-1">
                                ?ëÅ {homeVideo.stats?.views || "150K+"}
                              </span>
                              <span className="flex items-center gap-1">
                                ?§Ô∏è {homeVideo.stats?.likes || "2.5K+"}
                              </span>
                            </div>

                            {/* Action Buttons */}
                            <div className="flex flex-col sm:flex-row gap-2">
                              <button
                                onClick={() => openVideoModal(homeVideo.videoId)}
                                className="flex-1 bg-potato-orange text-white text-center py-2 px-3 sm:px-4 rounded-lg font-semibold hover:bg-potato-orange-dark transition-colors duration-300 text-sm"
                              >
                                ?é¨ ?ÅÏÉÅ ?¨ÏÉù
                              </button>
                              <a
                                href={homeVideo.videoUrl}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex-1 bg-clapperboard-gray-dark text-white text-center py-2 px-4 rounded-lg font-semibold hover:bg-clapperboard-gray transition-colors duration-300"
                              >
                                Ï±ÑÎÑê Î∞©Î¨∏
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Stats and Controls - Mobile Optimized */}
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm border-t border-white/10 pt-4 sm:pt-6 gap-4 sm:gap-0 mt-4">
                      <div className="flex items-center gap-4 sm:gap-6 text-gray-300">
                        <span className="flex items-center gap-2">
                          ?ëÅ{" "}
                          <span className="font-medium hidden sm:inline">
                            Ï°∞Ìöå??
                          </span>
                          <span className="font-bold text-white">
                            {homeVideo?.stats?.views || "150K+"}
                          </span>
                        </span>
                        <span className="flex items-center gap-2">
                          ?§Ô∏è{" "}
                          <span className="font-medium hidden sm:inline">
                            Ï¢ãÏïÑ??
                          </span>
                          <span className="font-bold text-white">
                            {homeVideo?.stats?.likes || "2.5K+"}
                          </span>
                        </span>
                      </div>

                        {/* Enhanced Volume Control - Mobile Friendly */}
                        <div className="flex items-center gap-3 sm:gap-4">
                          <div className="flex items-center gap-2 sm:gap-3">
                            <button
                              onClick={() => {
                                if (player && player.isMuted !== undefined) {
                                  const newMuted = !isMuted;
                                  setIsMuted(newMuted);

                                  if (newMuted) {
                                    player.mute();
                                  } else {
                                    player.unMute();
                                  }

                                  console.log(
                                    `YouTube player ${
                                      newMuted ? "muted" : "unmuted"
                                    }`
                                  );
                                } else {
                                  console.warn("YouTube player not ready");
                                }
                              }}
                              className="w-8 h-8 sm:w-10 sm:h-10 bg-white/10 hover:bg-white/20 rounded-full flex items-center justify-center transition-all duration-300 border border-white/20"
                              title={isMuted ? "?åÏÜåÍ±??¥Ï†ú" : "?åÏÜåÍ±?}
                            >
                              {isMuted || volume === 0 ? (
                                <svg
                                  className="w-4 h-4 sm:w-5 sm:h-5 text-white"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"
                                    clipRule="evenodd"
                                  />
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"
                                  />
                                </svg>
                              ) : (
                                <svg
                                  className="w-4 h-4 sm:w-5 sm:h-5 text-white"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"
                                  />
                                </svg>
                              )}
                            </button>

                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={volume}
                              onChange={(
                                e: React.ChangeEvent<HTMLInputElement>
                              ) => {
                                const newVolume = parseInt(e.target.value);
                                setVolume(newVolume);
                                setIsMuted(newVolume === 0);

                                if (player && player.setVolume) {
                                  player.setVolume(newVolume);
                                  if (newVolume === 0) {
                                    player.mute();
                                  } else {
                                    player.unMute();
                                  }
                                  console.log(
                                    `YouTube volume set to: ${newVolume}`
                                  );
                                } else {
                                  console.warn(
                                    "YouTube player not ready for volume control"
                                  );
                                }
                              }}
                              className="w-16 sm:w-20 h-2 bg-white/20 rounded-lg appearance-none cursor-pointer slider"
                              style={{
                                background: `linear-gradient(to right, #D2691E 0%, #D2691E ${volume}%, rgba(255,255,255,0.2) ${volume}%, rgba(255,255,255,0.2) 100%)`,
                              }}
                            />
                          </div>

                          <span className="text-xs sm:text-sm text-white/80 font-medium min-w-[3rem]">
                            {isMuted || volume === 0 ? "?îá" : `${volume}%`}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Enhanced Decorative Elements - Mobile Responsive */}
                  <div className="absolute -top-4 -right-4 sm:-top-6 sm:-right-6 w-8 h-8 sm:w-12 sm:h-12 bg-gradient-to-r from-potato-orange to-potato-orange-light rounded-full animate-pulse shadow-lg"></div>
                  <div className="absolute -bottom-4 -left-4 sm:-bottom-6 sm:-left-6 w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-r from-clapperboard-gray to-clapperboard-gray-light rounded-full animate-bounce shadow-lg"></div>
                  <div className="absolute top-1/2 -left-3 sm:-left-4 w-4 h-4 sm:w-6 sm:h-6 bg-gradient-to-r from-potato-orange-dark to-potato-orange rounded-full animate-ping opacity-75"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Scroll Indicator */}
        <div className="absolute bottom-8 sm:bottom-12 lg:bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce z-20">
          <Link href="#services">
            <div className="flex flex-col items-center gap-3 cursor-pointer group">
              <div className="w-8 h-12 border-2 border-potato-orange/60 rounded-full flex justify-center bg-gradient-to-b from-potato-orange/20 to-potato-orange-light/20 backdrop-blur-sm group-hover:border-potato-orange group-hover:bg-potato-orange/30 transition-all duration-300 shadow-lg">
                <div className="w-2 h-4 bg-gradient-to-b from-potato-orange to-potato-orange-light rounded-full mt-2 animate-pulse group-hover:scale-110 transition-all duration-300"></div>
              </div>
              <span className="text-potato-orange-light/80 text-sm font-bold group-hover:text-potato-orange transition-colors duration-300 tracking-wider">
                <UniversalContent
                  isAdmin={isAdmin}
                  pageName="home"
                  fields={{
                    scroll_text: {
                      value: "EXPLORE",
                      className: "text-sm font-bold tracking-wider",
                    },
                  }}
                />
              </span>
            </div>
          </Link>
        </div>
      </main>

      {/* Services Section - Enhanced Responsive */}
      <section
        id="services"
        className="py-16 sm:py-20 lg:py-24 bg-clapperboard-gray-dark"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12 sm:mb-16 lg:mb-20">
            <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white mb-4 sm:mb-6">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  services_title: {
                    value: "SERVICES",
                    className:
                      "text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white",
                  },
                }}
              />
            </h2>
            <div className="w-16 sm:w-20 lg:w-24 h-1 bg-gradient-to-r from-potato-orange to-potato-orange-light mx-auto mb-6 sm:mb-8"></div>
            <p className="text-base sm:text-lg lg:text-xl text-gray-300 max-w-3xl mx-auto px-4 sm:px-0">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  services_subtitle: {
                    value:
                      "?§Ïñë???ÅÏÉÅ ÏΩòÌÖêÏ∏??úÏûë ?úÎπÑ?§Î? ?µÌï¥ Î∏åÎûú?úÏùò Í∞ÄÏπòÎ? Í∑πÎ??îÌï©?àÎã§",
                    className: "text-base sm:text-lg lg:text-xl text-gray-300",
                  },
                }}
              />
            </p>
          </div>

          <StrapiContent endpoint="services">
            {(data, loading) => (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
                {loading
                  ? // Î°úÎî© ?ÅÌÉú
                    Array.from({ length: 6 }).map((_, index) => (
                      <div
                        key={index}
                        className="group p-6 sm:p-8 bg-clapperboard-gray rounded-2xl animate-pulse"
                      >
                        <div className="text-3xl sm:text-4xl mb-4 sm:mb-6">
                          ??
                        </div>
                        <div className="h-6 bg-gray-600 rounded mb-3 sm:mb-4"></div>
                        <div className="h-4 bg-gray-600 rounded"></div>
                      </div>
                    ))
                  : // Strapi ?∞Ïù¥???êÎäî Í∏∞Î≥∏ ?∞Ïù¥??
                    (data?.data?.length > 0
                      ? data.data
                      : [
                          {
                            attributes: {
                              title: "Î∏åÎûú???ÅÏÉÅ",
                              description:
                                "Í∏∞ÏóÖ???ïÏ≤¥?±Í≥º Í∞ÄÏπòÎ? ?¥Ï? Î∏åÎûú???§ÌÜ†Î¶??ÅÏÉÅ",
                              icon: "?é¨",
                            },
                          },
                          {
                            attributes: {
                              title: "Í¥ëÍ≥† ?ÅÏÉÅ",
                              description:
                                "?ÑÌå©???àÎäî Î©îÏãúÏßÄÎ°?Í≥†Í∞ù??ÎßàÏùå???¨Î°ú?°Îäî Í¥ëÍ≥†",
                              icon: "?ì∫",
                            },
                          },
                          {
                            attributes: {
                              title: "?ÑÎ°úÎ™®ÏÖò ?ÅÏÉÅ",
                              description:
                                "?úÌíàÍ≥??úÎπÑ?§Î? ?®Í≥º?ÅÏúºÎ°??¥ÌïÑ?òÎäî ?çÎ≥¥ ?ÅÏÉÅ",
                              icon: "??",
                            },
                          },
                          {
                            attributes: {
                              title: "?¥Î≤§???ÅÏÉÅ",
                              description:
                                "?πÎ≥Ñ???úÍ∞Ñ??Í∏∞Î°ù?òÍ≥† Í≥µÏú†?òÎäî ?¥Î≤§???ÅÏÉÅ",
                              icon: "?éâ",
                            },
                          },
                          {
                            attributes: {
                              title: "ÍµêÏú° ÏΩòÌÖêÏ∏?,
                              description:
                                "?ÑÎ¨∏?ÅÏù¥Í≥??¥Ìï¥?òÍ∏∞ ?¨Ïö¥ ÍµêÏú°???ÅÏÉÅ ÏΩòÌÖêÏ∏?,
                              icon: "?ìö",
                            },
                          },
                          {
                            attributes: {
                              title: "SNS ÏΩòÌÖêÏ∏?,
                              description:
                                "?åÏÖúÎØ∏Îîî???åÎû´?ºÏóê ÏµúÏ†Å?îÎêú Î∞îÏù¥??ÏΩòÌÖêÏ∏?,
                              icon: "?ì±",
                            },
                          },
                        ]
                    ).map((service, index) => (
                      <div
                        key={index}
                        className="group p-6 sm:p-8 bg-clapperboard-gray rounded-2xl hover:bg-potato-orange hover:text-white transition-all duration-500 transform hover:scale-105 hover:shadow-2xl"
                      >
                        <div className="text-3xl sm:text-4xl mb-4 sm:mb-6">
                          {service.attributes?.icon || "?é¨"}
                        </div>
                        <h3 className="text-xl sm:text-2xl font-bold mb-3 sm:mb-4 text-white">
                          {service.attributes?.title || "?úÎπÑ??}
                        </h3>
                        <p className="text-sm sm:text-base text-gray-300 group-hover:text-white leading-relaxed">
                          {service.attributes?.description || "?úÎπÑ???§Î™Ö"}
                        </p>
                      </div>
                    ))}
              </div>
            )}
          </StrapiContent>
        </div>
      </section>

      {/* Portfolio Showcase - Enhanced Responsive */}
      <section className="py-16 sm:py-20 lg:py-24 bg-clapperboard-gray">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12 sm:mb-16 lg:mb-20">
            <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white mb-4 sm:mb-6">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  portfolio_title: {
                    value: "PORTFOLIO",
                    className:
                      "text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white",
                  },
                }}
              />
            </h2>
            <div className="w-16 sm:w-20 lg:w-24 h-1 bg-gradient-to-r from-potato-orange to-potato-orange-light mx-auto mb-6 sm:mb-8"></div>
            <p className="text-base sm:text-lg lg:text-xl text-gray-300 max-w-3xl mx-auto px-4 sm:px-0">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  portfolio_subtitle: {
                    value: "?§Ïñë??Î∏åÎûú?úÏ? ?®Íªò???ÑÎ°ú?ùÌä∏?§ÏùÑ ÎßåÎÇòÎ≥¥ÏÑ∏??,
                    className: "text-base sm:text-lg lg:text-xl text-gray-300",
                  },
                }}
              />
            </p>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
            {[1, 2, 3, 4, 5, 6].map((item) => (
              <div
                key={item}
                className="group relative aspect-video bg-gray-800 rounded-xl sm:rounded-2xl overflow-hidden cursor-pointer hover:shadow-2xl transition-all duration-500"
              >
                <Image
                  src={`/imgs/${
                    item === 1 ? "1" : item === 2 ? "2" : "bg1"
                  }.jpg`}
                  alt={`Portfolio ${item}`}
                  fill
                  className="object-cover group-hover:scale-110 transition-transform duration-500"
                />
                <div className="absolute inset-0 bg-black/50 group-hover:bg-black/30 transition-all duration-300">
                  <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6">
                    <h3 className="text-white text-lg sm:text-xl font-bold mb-1 sm:mb-2">
                      ?ÑÎ°ú?ùÌä∏ {item}
                    </h3>
                    <p className="text-gray-300 text-xs sm:text-sm">
                      Î∏åÎûú???ÅÏÉÅ
                    </p>
                  </div>
                  <div className="absolute top-4 sm:top-6 right-4 sm:right-6 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <div className="w-10 h-10 sm:w-12 sm:h-12 bg-white rounded-full flex items-center justify-center hover:scale-110 transition-transform duration-200">
                      <svg
                        className="w-5 h-5 sm:w-6 sm:h-6 text-black"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1M9 16h6m-7 4h8a2 2 0 002-2V6a2 2 0 00-2-2H8a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="text-center mt-12 sm:mt-16">
            <Link href="/portfolio">
              <button className="w-full sm:w-auto px-8 sm:px-10 py-3 sm:py-4 border-2 border-white text-white font-bold rounded-full hover:bg-white hover:text-clapperboard-gray-dark transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
                <UniversalContent
                  isAdmin={isAdmin}
                  pageName="home"
                  fields={{
                    portfolio_button: {
                      value: "?ÑÏ≤¥ ?¨Ìä∏?¥Î¶¨??Î≥¥Í∏∞",
                      className: "text-white font-bold",
                    },
                  }}
                />
              </button>
            </Link>
          </div>
        </div>
      </section>

      {/* About Section - Enhanced Responsive */}
      <section className="py-16 sm:py-20 lg:py-24 bg-clapperboard-gray-light">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center">
            <div className="order-2 lg:order-1">
              <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white mb-6 sm:mb-8">
                <UniversalContent
                  isAdmin={isAdmin}
                  pageName="home"
                  fields={{
                    about_title: {
                      value: "ABOUT US",
                      className:
                        "text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white",
                    },
                  }}
                />
              </h2>
              <div className="w-16 sm:w-20 lg:w-24 h-1 bg-gradient-to-r from-potato-orange to-potato-orange-light mb-6 sm:mb-8"></div>

              <div className="space-y-4 sm:space-y-6 text-base sm:text-lg text-gray-300 leading-relaxed">
                <p>
                  <UniversalContent
                    isAdmin={isAdmin}
                    pageName="home"
                    fields={{
                      about_description1: {
                        value:
                          "COUCH POTATO??Î∏åÎûú?úÏùò ?¥ÏïºÍ∏∞Î? ?ÅÏÉÅ?ºÎ°ú ?ÑÏÑ±?òÎäî ?¨Î¶¨?êÏù¥?∞Î∏å ?§Ìäú?îÏò§?ÖÎãà??",
                        className:
                          "text-base sm:text-lg text-gray-300 leading-relaxed",
                      },
                    }}
                  />
                </p>
                <p>
                  <UniversalContent
                    isAdmin={isAdmin}
                    pageName="home"
                    fields={{
                      about_description2: {
                        value:
                          "?∞Î¶¨???®Ïàú???ÅÏÉÅ ?úÏûë???òÏñ¥?? Î∏åÎûú?úÍ? Í∞ÄÏß?Í≥†Ïú†??Í∞ÄÏπòÏ? Î©îÏãúÏßÄÎ•??úÍ∞Å?ÅÏúºÎ°?Íµ¨ÌòÑ?òÏó¨ Í≥†Í∞ùÍ≥ºÏùò ÍπäÏ? ?∞Í≤∞Í≥†Î¶¨Î•?ÎßåÎì§?¥ÎÉÖ?àÎã§.",
                        className:
                          "text-base sm:text-lg text-gray-300 leading-relaxed",
                      },
                    }}
                  />
                </p>
                <p>
                  <UniversalContent
                    isAdmin={isAdmin}
                    pageName="home"
                    fields={{
                      about_description3: {
                        value:
                          "Ï∞ΩÏùò?ÅÏù∏ ?ÑÏù¥?îÏñ¥?Ä ?ÑÎ¨∏?ÅÏù∏ Í∏∞Ïà†?•ÏùÑ Î∞îÌÉï?ºÎ°ú, Í∞?Î∏åÎûú?úÎßå???πÎ≥Ñ???§ÌÜ†Î¶¨Î? ?ÅÏÉÅ?ºÎ°ú ?ÑÏÑ±?òÎäî Í≤ÉÏù¥ ?∞Î¶¨??ÎØ∏ÏÖò?ÖÎãà??",
                        className:
                          "text-base sm:text-lg text-gray-300 leading-relaxed",
                      },
                    }}
                  />
                </p>
              </div>

              <div className="mt-8 sm:mt-12">
                <Link href="/about">
                  <button className="w-full sm:w-auto px-8 sm:px-10 py-3 sm:py-4 bg-potato-orange text-white font-bold rounded-full hover:bg-potato-orange-light transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
                    <UniversalContent
                      isAdmin={isAdmin}
                      pageName="home"
                      fields={{
                        about_button: {
                          value: "?êÏÑ∏???åÏïÑÎ≥¥Í∏∞",
                          className: "text-white font-bold",
                        },
                      }}
                    />
                  </button>
                </Link>
              </div>
            </div>

            <div className="relative order-1 lg:order-2">
              <div className="aspect-square bg-gradient-to-br from-clapperboard-gray via-clapperboard-gray-light to-clapperboard-gray-dark rounded-xl sm:rounded-2xl shadow-2xl flex items-center justify-center overflow-hidden hover:scale-105 transition-transform duration-500">
                {/* Î∞∞Í≤Ω??Î∏îÎü¨?Ä ?¨Î™Ö?? Í∑∏Î¶¨Í≥??•Í∑º ?åÎëêÎ¶??®Í≥º */}
                <div className="absolute inset-0 bg-black/60 backdrop-blur-sm rounded-xl sm:rounded-2xl z-10" />
                {/* Î°úÍ≥† ?¥Î?ÏßÄ */}
                <div className="relative z-20 w-3/4 sm:w-4/5 h-3/4 sm:h-4/5 flex items-center justify-center">
                  <img
                    src="/imgs/mainlogo.png"
                    alt="COUCH POTATO Î©îÏù∏ Î°úÍ≥†"
                    className="object-contain w-full h-full drop-shadow-[0_2px_16px_rgba(0,0,0,0.5)]"
                    style={{ borderRadius: "1.25rem" }}
                  />
                </div>
                {/* ?åÎëêÎ¶??•Ïãù */}
                <div className="absolute inset-0 rounded-xl sm:rounded-2xl border-2 sm:border-4 border-white/30 z-30 pointer-events-none" />
                {/* ÎπõÎÇò???®Í≥º */}
                <div className="absolute -inset-2 rounded-2xl sm:rounded-3xl bg-gradient-to-br from-potato-orange/20 via-potato-orange-light/10 to-clapperboard-gray/10 blur-2xl z-0" />
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonial Section - Enhanced Responsive */}
      <section className="py-16 sm:py-20 lg:py-24 bg-clapperboard-gray-dark">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12 sm:mb-16 lg:mb-20">
            <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white mb-4 sm:mb-6">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  reviews_title: {
                    value: "CLIENT REVIEWS",
                    className:
                      "text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white",
                  },
                }}
              />
            </h2>
            <div className="w-16 sm:w-20 lg:w-24 h-1 bg-gradient-to-r from-potato-orange to-potato-orange-light mx-auto mb-6 sm:mb-8"></div>
            <p className="text-base sm:text-lg lg:text-xl text-gray-300 max-w-3xl mx-auto px-4 sm:px-0">
              <UniversalContent
                isAdmin={isAdmin}
                pageName="home"
                fields={{
                  reviews_subtitle: {
                    value:
                      "?®Íªò ?ëÏóÖ???¥Îùº?¥Ïñ∏?∏Îì§???ùÏÉù???ÑÍ∏∞Î•??§Ïñ¥Î≥¥ÏÑ∏??,
                    className: "text-base sm:text-lg lg:text-xl text-gray-300",
                  },
                }}
              />
            </p>
          </div>

          <StrapiContent endpoint="reviews">
            {(data, loading) => (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
                {loading
                  ? // Î°úÎî© ?ÅÌÉú
                    Array.from({ length: 3 }).map((_, index) => (
                      <div
                        key={index}
                        className="bg-clapperboard-gray p-6 sm:p-8 rounded-2xl shadow-lg animate-pulse"
                      >
                        <div className="flex items-center mb-4 sm:mb-6">
                          <div className="w-10 h-10 sm:w-12 sm:h-12 bg-gray-600 rounded-full"></div>
                          <div className="ml-3 sm:ml-4">
                            <div className="h-4 bg-gray-600 rounded mb-2"></div>
                            <div className="h-3 bg-gray-600 rounded w-20"></div>
                          </div>
                        </div>
                        <div className="h-4 bg-gray-600 rounded mb-2"></div>
                        <div className="h-4 bg-gray-600 rounded w-3/4"></div>
                      </div>
                    ))
                  : // Strapi ?∞Ïù¥???êÎäî Í∏∞Î≥∏ ?∞Ïù¥??
                    (data?.data?.length > 0
                      ? data.data
                      : [
                          {
                            attributes: {
                              name: "ÍπÄ?Ä??,
                              company: "?åÌÅ¨?§Ì??∏ÏóÖ",
                              review:
                                "COUCH POTATO?Ä ?®Íªò??Î∏åÎûú???ÅÏÉÅ ?ÑÎ°ú?ùÌä∏???ïÎßê ÎßåÏ°±?§Îü¨?†Ïäµ?àÎã§. ?∞Î¶¨ Î∏åÎûú?úÏùò Í∞ÄÏπòÎ? ?ÑÎ≤Ω?òÍ≤å ?¥Ìï¥?òÍ≥† Íµ¨ÌòÑ?¥Ï£º?àÏñ¥??",
                            },
                          },
                          {
                            attributes: {
                              name: "?¥ÎßàÏºÄ??,
                              company: "?®ÏÖòÎ∏åÎûú??,
                              review:
                                "Ï∞ΩÏùò?ÅÏù¥Í≥??∏Î†å?îÌïú ?ÅÏÉÅ?ºÎ°ú ?∞Î¶¨ Î∏åÎûú?úÎ? ???®Í≥Ñ ?ÖÍ∑∏?àÏù¥?úÏãúÏºúÏ£º?àÏäµ?àÎã§. ?ÑÎ¨∏?±Í≥º ?¥Ï†ï???êÍª¥ÏßÄ???Ä?¥Ïóê??",
                            },
                          },
                          {
                            attributes: {
                              name: "Î∞ïÏã§??,
                              company: "ÍµêÏú°Í∏∞Í?",
                              review:
                                "Î≥µÏû°??ÍµêÏú° ?¥Ïö©???ΩÍ≥† ?¨Î??àÍ≤å ?Ä?¥ÎÇ∏ ?ÅÏÉÅ???ïÎßê ?∏ÏÉÅ?ÅÏù¥?àÏäµ?àÎã§. ?ôÏäµ ?®Í≥º???¨Í≤å ?•ÏÉÅ?òÏóà?¥Ïöî.",
                            },
                          },
                        ]
                    ).map((testimonial, index) => (
                      <div
                        key={index}
                        className="bg-clapperboard-gray p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105"
                      >
                        <div className="flex items-center mb-4 sm:mb-6">
                          <div className="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-potato-orange to-potato-orange-light rounded-full flex items-center justify-center text-white font-bold text-sm sm:text-base">
                            {(testimonial.attributes?.name || "Í≥†Í∞ù")[0]}
                          </div>
                          <div className="ml-3 sm:ml-4">
                            <h4 className="font-bold text-white text-sm sm:text-base">
                              {testimonial.attributes?.name || "Í≥†Í∞ù"}
                            </h4>
                            <p className="text-gray-300 text-xs sm:text-sm">
                              {testimonial.attributes?.company || "?åÏÇ¨"}
                            </p>
                          </div>
                        </div>
                        <p className="text-gray-300 leading-relaxed italic text-sm sm:text-base">
                          &quot;{testimonial.attributes?.review || "Î¶¨Î∑∞ ?¥Ïö©"}
                          &quot;
                        </p>
                      </div>
                    ))}
              </div>
            )}
          </StrapiContent>
        </div>
      </section>

      {/* CTA Section - Enhanced Responsive */}
      <section className="py-16 sm:py-20 lg:py-24 bg-clapperboard-gray">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white mb-6 sm:mb-8">
            <UniversalContent
              isAdmin={isAdmin}
              pageName="home"
              fields={{
                final_cta_title: {
                  value: "?úÏûë?¥Î≥ºÍπåÏöî?",
                  className:
                    "text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-black text-white",
                },
              }}
            />
          </h2>
          <p className="text-base sm:text-lg lg:text-xl text-gray-300 mb-8 sm:mb-12 max-w-2xl mx-auto leading-relaxed px-4 sm:px-0">
            <UniversalContent
              isAdmin={isAdmin}
              pageName="home"
              fields={{
                final_cta_subtitle: {
                  value:
                    "Î∏åÎûú?úÏùò ?¥ÏïºÍ∏∞Î? ?ÅÏÉÅ?ºÎ°ú ?ÑÏÑ±??Ï§ÄÎπÑÍ? ?òÏÖ®?òÏöî? COUCH POTATO?Ä ?®Íªò ?πÎ≥Ñ???ÑÎ°ú?ùÌä∏Î•??úÏûë?¥Î≥¥?∏Ïöî.",
                  className:
                    "text-base sm:text-lg lg:text-xl text-gray-300 leading-relaxed",
                },
              }}
            />
          </p>

          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center items-center">
            <Link href="/contact" className="w-full sm:w-auto">
              <button className="w-full sm:w-auto px-8 sm:px-10 lg:px-12 py-4 sm:py-5 bg-gradient-to-r from-potato-orange to-potato-orange-light text-white font-bold rounded-full hover:from-potato-orange-light hover:to-potato-orange-dark transform hover:scale-105 transition-all duration-300 shadow-xl">
                <UniversalContent
                  isAdmin={isAdmin}
                  pageName="home"
                  fields={{
                    final_cta_button1: {
                      value: "?ÑÎ°ú?ùÌä∏ Î¨∏Ïùò?òÍ∏∞",
                      className: "text-white font-bold",
                    },
                  }}
                />
              </button>
            </Link>
            <Link href="/process" className="w-full sm:w-auto">
              <button className="w-full sm:w-auto px-8 sm:px-10 lg:px-12 py-4 sm:py-5 border-2 border-white text-white font-bold rounded-full hover:bg-white hover:text-clapperboard-gray-dark transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
                <UniversalContent
                  isAdmin={isAdmin}
                  pageName="home"
                  fields={{
                    final_cta_button2: {
                      value: "?úÏûë ?ÑÎ°ú?∏Ïä§ Î≥¥Í∏∞",
                      className: "text-white font-bold",
                    },
                  }}
                />
              </button>
            </Link>
          </div>
        </div>
      </section>

      {/* Video Modal */}
      {isModalOpen && selectedVideo && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="relative w-full max-w-4xl bg-black rounded-2xl overflow-hidden shadow-2xl">
            {/* Close Button */}
            <button
              onClick={closeVideoModal}
              className="absolute top-4 right-4 z-10 w-10 h-10 bg-black/50 hover:bg-black/70 rounded-full flex items-center justify-center text-white transition-colors duration-300"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>

            {/* Video Container */}
            <div className="relative w-full aspect-video">
              <iframe
                src={`https://www.youtube.com/embed/${selectedVideo}?autoplay=1&rel=0&modestbranding=1`}
                title="Video Player"
                className="w-full h-full"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              />
            </div>
          </div>
        </div>
      )}
    </>
  );
}

